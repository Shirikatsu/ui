{"version":3,"file":"Field.js","sources":["../src/components/Field/Field.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { Inside } from 'use-inside'\nimport { useTheme } from '../../theme'\nimport { textStyle, GU } from '../../style'\nimport { unselectable } from '../../utils'\n\n// This variable is used as a simple mechanism to generate unique IDs, that can\n// be used to link the <label> to a specific form element by using a render\n// prop. See `children` in the Field documentation for more details.\nlet fieldId = 1\n\nfunction Field({ children, label, required, ...props }) {\n  const theme = useTheme()\n\n  const isRequired =\n    required ||\n    React.Children.toArray(children).some(\n      ({ props }) => props && props.required\n    )\n\n  const id = useMemo(\n    () => (typeof children === 'function' ? `Field_${fieldId++}` : null),\n    [children]\n  )\n\n  const labelProps = id === null ? {} : { htmlFor: id }\n\n  return (\n    <Inside name=\"Field\">\n      <div\n        css={`\n          margin-bottom: ${3 * GU}px;\n        `}\n        {...props}\n      >\n        <label {...labelProps}>\n          <div\n            css={`\n              display: flex;\n              align-items: center;\n              height: ${2 * GU}px;\n              margin-bottom: ${0.5 * GU}px;\n              color: ${theme.surfaceContentSecondary};\n              white-space: nowrap;\n              ${textStyle('label2')};\n              ${unselectable};\n            `}\n          >\n            <Inside name=\"Field:label\">\n              {label}\n              {isRequired && (\n                <span\n                  css={`\n                    color: ${theme.accent};\n                  `}\n                  title=\"Required\"\n                >\n                  {'\\u00a0*'}\n                </span>\n              )}\n            </Inside>\n          </div>\n          <Inside name=\"Field:content\">\n            {typeof children === 'function' ? children({ id }) : children}\n          </Inside>\n        </label>\n      </div>\n    </Inside>\n  )\n}\n\nField.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  label: PropTypes.node,\n  required: PropTypes.bool,\n}\n\nexport default Field\n"],"names":["fieldId","unselectable","Field","children","label","required","props","theme","useTheme","isRequired","React","Children","toArray","some","id","useMemo","labelProps","htmlFor","Inside","GU","surfaceContentSecondary","textStyle","accent","propTypes","PropTypes","oneOfType","node","func","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;;AACA,IAAIA,OAAO,GAAG,CAAd;;;;;;;;;;4KAoCgBC;;;;;;;AAlChB,SAASC,KAAT,CAAe;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,QAAnB;AAA6B,KAAGC;AAAhC,CAAf,EAAwD;AACtD,QAAMC,KAAK,GAAGC,cAAQ,EAAtB;AAEA,QAAMC,UAAU,GACdJ,QAAQ,IACRK,yBAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBT,QAAvB,EAAiCU,IAAjC,CACE,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAeA,KAAK,IAAIA,KAAK,CAACD,QADhC,CAFF;AAMA,QAAMS,EAAE,GAAGC,aAAO,CAChB,MAAO,OAAOZ,QAAP,KAAoB,UAApB,GAAkC,SAAQH,OAAO,EAAG,EAApD,GAAwD,IAD/C,EAEhB,CAACG,QAAD,CAFgB,CAAlB;AAKA,QAAMa,UAAU,GAAGF,EAAE,KAAK,IAAP,GAAc,EAAd,GAAmB;AAAEG,IAAAA,OAAO,EAAEH;AAAX,GAAtC;AAEA,sBACEJ,wCAACQ,OAAD;AAAQ,IAAA,IAAI,EAAC;AAAb,kBACER,0EAIMJ,KAJN;AAAA,UAEqB,IAAIa;AAFzB,mBAMET,iDAAWM,UAAX,eACEN;AAAA,WAIc,IAAIS,YAJlB;AAAA,WAKqB,MAAMA,YAL3B;AAAA,WAMaZ,KAAK,CAACa,uBANnB;AAAA,WAQMC,oBAAS,CAAC,QAAD;AARf,kBAYEX,wCAACQ,OAAD;AAAQ,IAAA,IAAI,EAAC;AAAb,KACGd,KADH,EAEGK,UAAU,iBACTC;AAIE,IAAA,KAAK,EAAC,UAJR;AAAA,WAEaH,KAAK,CAACe;AAFnB,KAMG,SANH,CAHJ,CAZF,CADF,eA2BEZ,wCAACQ,OAAD;AAAQ,IAAA,IAAI,EAAC;AAAb,KACG,OAAOf,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAAC;AAAEW,IAAAA;AAAF,GAAD,CAAzC,GAAoDX,QADvD,CA3BF,CANF,CADF,CADF;AA0CD;;AAEDD,KAAK,CAACqB,SAAN,GAAkB;AAChBpB,EAAAA,QAAQ,EAAEqB,iBAAS,CAACC,SAAV,CAAoB,CAACD,iBAAS,CAACE,IAAX,EAAiBF,iBAAS,CAACG,IAA3B,CAApB,CADM;AAEhBvB,EAAAA,KAAK,EAAEoB,iBAAS,CAACE,IAFD;AAGhBrB,EAAAA,QAAQ,EAAEmB,iBAAS,CAACI;AAHJ,CAAlB;;;;"}